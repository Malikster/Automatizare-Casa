apply plugin: 'com.android.application'


android {
    compileSdkVersion 28

    def _versionCode=0
    def versionPropsFile = file('version.properties')
    Properties versionProps = new Properties()
    if(versionPropsFile.exists())
        versionProps.load(new FileInputStream(versionPropsFile))
    def _patch = (versionProps['PATCH'] ?: "0").toInteger() + 1
    def _major = (versionProps['MAJOR'] ?: "0").toInteger()
    def _minor = (versionProps['MINOR'] ?: "0").toInteger()
    List<String> runTasks = gradle.startParameter.getTaskNames()
    def value = 0
    def pack = 0
    for (String item : runTasks)
        if ( item.contains("assembleDebug")) {
            pack = 1
        } else if ( item.contains("assembleRelease")) {
            value = 1
        }
    _patch = _patch + pack
    _versionCode = (versionProps['VERSION_CODE'] ?: "1").toInteger() + value
    if(_patch==99)
    {
        _patch=0
        _minor=_minor+1
    }
    if(_major==99){
        _major=0
        _major=_major+1
    }

    versionProps['MAJOR']=_major.toString()
    versionProps['MINOR']=_minor.toString()
    versionProps['PATCH']=_patch.toString()
    versionProps['VERSION_CODE']=_versionCode.toString()
    versionProps.store(versionPropsFile.newWriter(), null)
    def _versionName = "${_major}.${_versionCode}.${_minor}.${_patch}"

    //compileSdkVersion 24
    //buildToolsVersion "24.0.0"

    defaultConfig {
        applicationId "ro.thich.automatizarecasa"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode _versionCode
        versionName _versionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    /*task copyAPKtoAsset(type: Copy) {
        from "/build/intermediates/instant-run-apk/debug/app-debug.apk"
        into "ftp://192.168.0.1/usb1_1/ACasa/ACasa.apk"
    }

    afterEvaluate {
        packageDebug.finalizedBy(copyAPKtoAsset)
    }*/
    /*ant {
        put (src: "/build/intermediates/instant-run-apk/debug/app-debug.apk", dest: "ftp://192.168.0.1/usb1_1/ACasa/ACasa.apk")
    }*/
}

configurations {
    ftpAntTask
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha02'
    implementation 'com.google.android.material:material:1.1.0-alpha04'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:preference-v7:28.0.0'
    implementation 'org.apache.httpcomponents:httpcore:4.4.9'
    implementation 'com.android.support:design:28.0.0'
    //noinspection DuplicatePlatformClasses
    implementation 'org.apache.httpcomponents:httpclient:4.5.5'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.2-alpha01'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.2-alpha01'
    ftpAntTask("org.apache.ant:ant-commons-net:1.8.4") {
        module("commons-net:commons-net:1.4.1") {
            dependencies "oro:oro:2.0.8:jar"
        }
    }
}

/*task ftp << {
    ant {
        taskdef(name: 'ftp',
                classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                classpath: configurations.ftpAntTask.asPath)
        ftp(server: "ftp://192.168.0.1/usb1_1/ACasa/") {
            fileset(file: "/build/intermediates/instant-run-apk/debug/app-debug.apk")
        }
    }
}*/
